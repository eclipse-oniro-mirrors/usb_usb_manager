diff --git a/services/native/src/usb_service.cpp b/services/native/src/usb_service.cpp
index cbc3e43..54c698b 100644
--- a/services/native/src/usb_service.cpp
+++ b/services/native/src/usb_service.cpp
@@ -400,7 +400,7 @@ int32_t UsbService::ControlTransfer(const UsbDev &dev, const UsbCtrlTransfer &ct
         return UEC_SERVICE_INVALID_VALUE;
     }
 
-    int32_t ret = HDF_FAILURE;
+    int32_t ret = UEC_SERVICE_INNER_ERR;
     if ((ctrl.requestType & USB_ENDPOINT_DIR_MASK) == USB_ENDPOINT_DIR_OUT) {
         ret = usbd_->ControlTransferWrite(dev, ctrl, bufferData);
         if (ret != UEC_OK) {
diff --git a/services/native/src/usbd_bulkcallback_impl.cpp b/services/native/src/usbd_bulkcallback_impl.cpp
index 4e7bbf2..d7404ce 100644
--- a/services/native/src/usbd_bulkcallback_impl.cpp
+++ b/services/native/src/usbd_bulkcallback_impl.cpp
@@ -28,17 +28,17 @@ int32_t UsbdBulkCallbackImpl::OnBulkWriteCallback(int32_t status, int32_t actLen
     OHOS::MessageParcel reply;
     OHOS::MessageOption option;
     if (!data.WriteInt32(status)) {
-        USB_HILOGE("%{public}s: write status failed", __func__);
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s: write status failed", __func__);
         return UEC_SERVICE_INVALID_VALUE;
     }
 
     if (!data.WriteInt32(actLength)) {
-        USB_HILOGE("%{public}s: write actLength failed", __func__);
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s: write actLength failed", __func__);
         return UEC_SERVICE_INVALID_VALUE;
     }
     int32_t ret = remote_->SendRequest(UsbdBulkCallBack::CMD_USBD_BULK_CALLBACK_WRITE, data, reply, option);
-    if (ret != HDF_SUCCESS) {
-        USB_HILOGE("%{public}s failed, error code is %{public}d", __func__, ret);
+    if (ret != UEC_OK) {
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s failed, error code is %{public}d", __func__, ret);
         return ret;
     }
     return UEC_OK;
@@ -48,12 +48,12 @@ int32_t UsbdBulkCallbackImpl::OnBulkReadCallback(int32_t status, int32_t actLeng
 {
     OHOS::MessageParcel data;
     if (!data.WriteInt32(status)) {
-        USB_HILOGE("%{public}s: write status failed", __func__);
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s: write status failed", __func__);
         return UEC_SERVICE_INVALID_VALUE;
     }
 
     if (!data.WriteInt32(actLength)) {
-        USB_HILOGE("%{public}s: write actLength failed", __func__);
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s: write actLength failed", __func__);
         return UEC_SERVICE_INVALID_VALUE;
     }
 
@@ -61,7 +61,7 @@ int32_t UsbdBulkCallbackImpl::OnBulkReadCallback(int32_t status, int32_t actLeng
     OHOS::MessageOption option;
     int32_t ret = remote_->SendRequest(UsbdBulkCallBack::CMD_USBD_BULK_CALLBACK_READ, data, reply, option);
     if (ret != UEC_OK) {
-        USB_HILOGE("%{public}s failed, error code is %{public}d", __func__, ret);
+        USB_HILOGE(MODULE_USB_SERVICE, "%{public}s failed, error code is %{public}d", __func__, ret);
         return ret;
     }
     return UEC_OK;
diff --git a/usb_manager.patch b/usb_manager.patch
index 52e20b6..e69de29 100644
--- a/usb_manager.patch
+++ b/usb_manager.patch
@@ -1,28 +0,0 @@
-diff --git a/services/native/src/usbd_bulkcallback_impl.cpp b/services/native/src/usbd_bulkcallback_impl.cpp
-index bd5fe3a..4e7bbf2 100644
---- a/services/native/src/usbd_bulkcallback_impl.cpp
-+++ b/services/native/src/usbd_bulkcallback_impl.cpp
-@@ -18,6 +18,7 @@
- #include "message_parcel.h"
- #include "usbd_bulk_callback.h"
- #include "usb_errors.h"
-+#include "hilog_wrapper.h"
- 
- namespace OHOS {
- namespace USB {
-@@ -45,6 +46,7 @@ int32_t UsbdBulkCallbackImpl::OnBulkWriteCallback(int32_t status, int32_t actLen
- 
- int32_t UsbdBulkCallbackImpl::OnBulkReadCallback(int32_t status, int32_t actLength)
- {
-+    OHOS::MessageParcel data;
-     if (!data.WriteInt32(status)) {
-         USB_HILOGE("%{public}s: write status failed", __func__);
-         return UEC_SERVICE_INVALID_VALUE;
-@@ -55,7 +57,6 @@ int32_t UsbdBulkCallbackImpl::OnBulkReadCallback(int32_t status, int32_t actLeng
-         return UEC_SERVICE_INVALID_VALUE;
-     }
- 
--    OHOS::MessageParcel data;
-     OHOS::MessageParcel reply;
-     OHOS::MessageOption option;
-     int32_t ret = remote_->SendRequest(UsbdBulkCallBack::CMD_USBD_BULK_CALLBACK_READ, data, reply, option);
diff --git a/utils/native/include/usb_errors.h b/utils/native/include/usb_errors.h
index 235cf62..530afb7 100644
--- a/utils/native/include/usb_errors.h
+++ b/utils/native/include/usb_errors.h
@@ -71,18 +71,6 @@ enum {
     UEC_SERVICE_ADD_DEATH_RECIPIENT_FAILED,
     UEC_SERVICE_INNER_ERR,
     UEC_SERVICE_END,
-
-    UEC_HDF_FAILURE = UEC_SERVICE_NO_MEMORY + USB_OFFSET,
-    UEC_HDF_ERR_NOT_SUPPORT,
-    UEC_HDF_ERR_INVALID_PARAM,
-    UEC_HDF_ERR_INVALID_OBJECT,
-    UEC_HDF_ERR_MALLOC_FAIL,
-    UEC_HDF_ERR_TIMEOUT,
-    UEC_HDF_ERR_THREAD_CREATE_FAIL,
-    UEC_HDF_ERR_QUEUE_FULL,
-    UEC_HDF_ERR_DEVICE_BUSY,
-    UEC_HDF_ERR_IO,
-    UEC_HDF_ERR_BAD_FD
 };
 } // namespace USB
 } // namespace OHOS
