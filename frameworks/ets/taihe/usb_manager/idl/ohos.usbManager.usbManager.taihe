/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.usbManager", "usbManager")

@!sts_inject("""
static { loadLibrary("usb_manager_taihe_native.z") }
""")

enum USBRequestDirection: i32 {
    USB_REQUEST_DIR_TO_DEVICE = 0,
    USB_REQUEST_DIR_FROM_DEVICE = 0x80
}

struct USBEndpoint {
    address: i32;
    attributes: i32;
    interval: i32;
    maxPacketSize: i32;
    direction: USBRequestDirection;
    endpointAddr: i32;
    type: i32;
    interfaceId: i32;
}

struct USBInterface {
    id: i32;
    protocol: i32;
    clazz: i32;
    subClass: i32;
    alternateSetting: i32;
    name: String;
    endpoints: Array<USBEndpoint>;
}

struct USBConfiguration {
    id: i32;
    attributes: i32;
    maxPower: i32;
    name: String;
    isRemoteWakeup: bool;
    isSelfPowered: bool;
    interfaces: Array<USBInterface>;
}

struct USBDevice {
    busNum: i32;
    devAddress: i32;
    serial: String;
    name: String;
    manufacturerName: String;
    productName: String;
    version: String;
    vendorId: i32;
    productId: i32;
    clazz: i32;
    subClass: i32;
    protocol: i32;
    configs: Array<USBConfiguration>;
}

function getDevices(): Array<USBDevice>;
